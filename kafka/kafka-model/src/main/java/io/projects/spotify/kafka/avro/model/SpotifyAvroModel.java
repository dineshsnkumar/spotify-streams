/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.projects.spotify.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SpotifyAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3806317627602729732L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SpotifyAvroModel\",\"namespace\":\"io.projects.spotify.kafka.avro.model\",\"fields\":[{\"name\":\"number\",\"type\":\"long\"},{\"name\":\"track_id\",\"type\":\"long\"},{\"name\":\"artists\",\"type\":\"string\"},{\"name\":\"album_name\",\"type\":\"string\"},{\"name\":\"track_name\",\"type\":\"string\"},{\"name\":\"popularity\",\"type\":\"long\"},{\"name\":\"duration_ms\",\"type\":\"long\"},{\"name\":\"explicit\",\"type\":\"boolean\"},{\"name\":\"danceability\",\"type\":\"long\"},{\"name\":\"energy\",\"type\":\"long\"},{\"name\":\"key\",\"type\":\"long\"},{\"name\":\"mode\",\"type\":\"long\"},{\"name\":\"speechiness\",\"type\":\"long\"},{\"name\":\"acousticness\",\"type\":\"long\"},{\"name\":\"instrumentalness\",\"type\":\"long\"},{\"name\":\"liveness\",\"type\":\"long\"},{\"name\":\"valence\",\"type\":\"long\"},{\"name\":\"tempo\",\"type\":\"long\"},{\"name\":\"time_signature\",\"type\":\"long\"},{\"name\":\"track_genre\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SpotifyAvroModel> ENCODER =
      new BinaryMessageEncoder<SpotifyAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SpotifyAvroModel> DECODER =
      new BinaryMessageDecoder<SpotifyAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SpotifyAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SpotifyAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SpotifyAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SpotifyAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SpotifyAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SpotifyAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SpotifyAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SpotifyAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long number;
   private long track_id;
   private java.lang.CharSequence artists;
   private java.lang.CharSequence album_name;
   private java.lang.CharSequence track_name;
   private long popularity;
   private long duration_ms;
   private boolean explicit;
   private long danceability;
   private long energy;
   private long key;
   private long mode;
   private long speechiness;
   private long acousticness;
   private long instrumentalness;
   private long liveness;
   private long valence;
   private long tempo;
   private long time_signature;
   private java.lang.CharSequence track_genre;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SpotifyAvroModel() {}

  /**
   * All-args constructor.
   * @param number The new value for number
   * @param track_id The new value for track_id
   * @param artists The new value for artists
   * @param album_name The new value for album_name
   * @param track_name The new value for track_name
   * @param popularity The new value for popularity
   * @param duration_ms The new value for duration_ms
   * @param explicit The new value for explicit
   * @param danceability The new value for danceability
   * @param energy The new value for energy
   * @param key The new value for key
   * @param mode The new value for mode
   * @param speechiness The new value for speechiness
   * @param acousticness The new value for acousticness
   * @param instrumentalness The new value for instrumentalness
   * @param liveness The new value for liveness
   * @param valence The new value for valence
   * @param tempo The new value for tempo
   * @param time_signature The new value for time_signature
   * @param track_genre The new value for track_genre
   */
  public SpotifyAvroModel(java.lang.Long number, java.lang.Long track_id, java.lang.CharSequence artists, java.lang.CharSequence album_name, java.lang.CharSequence track_name, java.lang.Long popularity, java.lang.Long duration_ms, java.lang.Boolean explicit, java.lang.Long danceability, java.lang.Long energy, java.lang.Long key, java.lang.Long mode, java.lang.Long speechiness, java.lang.Long acousticness, java.lang.Long instrumentalness, java.lang.Long liveness, java.lang.Long valence, java.lang.Long tempo, java.lang.Long time_signature, java.lang.CharSequence track_genre) {
    this.number = number;
    this.track_id = track_id;
    this.artists = artists;
    this.album_name = album_name;
    this.track_name = track_name;
    this.popularity = popularity;
    this.duration_ms = duration_ms;
    this.explicit = explicit;
    this.danceability = danceability;
    this.energy = energy;
    this.key = key;
    this.mode = mode;
    this.speechiness = speechiness;
    this.acousticness = acousticness;
    this.instrumentalness = instrumentalness;
    this.liveness = liveness;
    this.valence = valence;
    this.tempo = tempo;
    this.time_signature = time_signature;
    this.track_genre = track_genre;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return track_id;
    case 2: return artists;
    case 3: return album_name;
    case 4: return track_name;
    case 5: return popularity;
    case 6: return duration_ms;
    case 7: return explicit;
    case 8: return danceability;
    case 9: return energy;
    case 10: return key;
    case 11: return mode;
    case 12: return speechiness;
    case 13: return acousticness;
    case 14: return instrumentalness;
    case 15: return liveness;
    case 16: return valence;
    case 17: return tempo;
    case 18: return time_signature;
    case 19: return track_genre;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.lang.Long)value$; break;
    case 1: track_id = (java.lang.Long)value$; break;
    case 2: artists = (java.lang.CharSequence)value$; break;
    case 3: album_name = (java.lang.CharSequence)value$; break;
    case 4: track_name = (java.lang.CharSequence)value$; break;
    case 5: popularity = (java.lang.Long)value$; break;
    case 6: duration_ms = (java.lang.Long)value$; break;
    case 7: explicit = (java.lang.Boolean)value$; break;
    case 8: danceability = (java.lang.Long)value$; break;
    case 9: energy = (java.lang.Long)value$; break;
    case 10: key = (java.lang.Long)value$; break;
    case 11: mode = (java.lang.Long)value$; break;
    case 12: speechiness = (java.lang.Long)value$; break;
    case 13: acousticness = (java.lang.Long)value$; break;
    case 14: instrumentalness = (java.lang.Long)value$; break;
    case 15: liveness = (java.lang.Long)value$; break;
    case 16: valence = (java.lang.Long)value$; break;
    case 17: tempo = (java.lang.Long)value$; break;
    case 18: time_signature = (java.lang.Long)value$; break;
    case 19: track_genre = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return The value of the 'number' field.
   */
  public long getNumber() {
    return number;
  }


  /**
   * Sets the value of the 'number' field.
   * @param value the value to set.
   */
  public void setNumber(long value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'track_id' field.
   * @return The value of the 'track_id' field.
   */
  public long getTrackId() {
    return track_id;
  }


  /**
   * Sets the value of the 'track_id' field.
   * @param value the value to set.
   */
  public void setTrackId(long value) {
    this.track_id = value;
  }

  /**
   * Gets the value of the 'artists' field.
   * @return The value of the 'artists' field.
   */
  public java.lang.CharSequence getArtists() {
    return artists;
  }


  /**
   * Sets the value of the 'artists' field.
   * @param value the value to set.
   */
  public void setArtists(java.lang.CharSequence value) {
    this.artists = value;
  }

  /**
   * Gets the value of the 'album_name' field.
   * @return The value of the 'album_name' field.
   */
  public java.lang.CharSequence getAlbumName() {
    return album_name;
  }


  /**
   * Sets the value of the 'album_name' field.
   * @param value the value to set.
   */
  public void setAlbumName(java.lang.CharSequence value) {
    this.album_name = value;
  }

  /**
   * Gets the value of the 'track_name' field.
   * @return The value of the 'track_name' field.
   */
  public java.lang.CharSequence getTrackName() {
    return track_name;
  }


  /**
   * Sets the value of the 'track_name' field.
   * @param value the value to set.
   */
  public void setTrackName(java.lang.CharSequence value) {
    this.track_name = value;
  }

  /**
   * Gets the value of the 'popularity' field.
   * @return The value of the 'popularity' field.
   */
  public long getPopularity() {
    return popularity;
  }


  /**
   * Sets the value of the 'popularity' field.
   * @param value the value to set.
   */
  public void setPopularity(long value) {
    this.popularity = value;
  }

  /**
   * Gets the value of the 'duration_ms' field.
   * @return The value of the 'duration_ms' field.
   */
  public long getDurationMs() {
    return duration_ms;
  }


  /**
   * Sets the value of the 'duration_ms' field.
   * @param value the value to set.
   */
  public void setDurationMs(long value) {
    this.duration_ms = value;
  }

  /**
   * Gets the value of the 'explicit' field.
   * @return The value of the 'explicit' field.
   */
  public boolean getExplicit() {
    return explicit;
  }


  /**
   * Sets the value of the 'explicit' field.
   * @param value the value to set.
   */
  public void setExplicit(boolean value) {
    this.explicit = value;
  }

  /**
   * Gets the value of the 'danceability' field.
   * @return The value of the 'danceability' field.
   */
  public long getDanceability() {
    return danceability;
  }


  /**
   * Sets the value of the 'danceability' field.
   * @param value the value to set.
   */
  public void setDanceability(long value) {
    this.danceability = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return The value of the 'energy' field.
   */
  public long getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * @param value the value to set.
   */
  public void setEnergy(long value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public long getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(long value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'mode' field.
   * @return The value of the 'mode' field.
   */
  public long getMode() {
    return mode;
  }


  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(long value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'speechiness' field.
   * @return The value of the 'speechiness' field.
   */
  public long getSpeechiness() {
    return speechiness;
  }


  /**
   * Sets the value of the 'speechiness' field.
   * @param value the value to set.
   */
  public void setSpeechiness(long value) {
    this.speechiness = value;
  }

  /**
   * Gets the value of the 'acousticness' field.
   * @return The value of the 'acousticness' field.
   */
  public long getAcousticness() {
    return acousticness;
  }


  /**
   * Sets the value of the 'acousticness' field.
   * @param value the value to set.
   */
  public void setAcousticness(long value) {
    this.acousticness = value;
  }

  /**
   * Gets the value of the 'instrumentalness' field.
   * @return The value of the 'instrumentalness' field.
   */
  public long getInstrumentalness() {
    return instrumentalness;
  }


  /**
   * Sets the value of the 'instrumentalness' field.
   * @param value the value to set.
   */
  public void setInstrumentalness(long value) {
    this.instrumentalness = value;
  }

  /**
   * Gets the value of the 'liveness' field.
   * @return The value of the 'liveness' field.
   */
  public long getLiveness() {
    return liveness;
  }


  /**
   * Sets the value of the 'liveness' field.
   * @param value the value to set.
   */
  public void setLiveness(long value) {
    this.liveness = value;
  }

  /**
   * Gets the value of the 'valence' field.
   * @return The value of the 'valence' field.
   */
  public long getValence() {
    return valence;
  }


  /**
   * Sets the value of the 'valence' field.
   * @param value the value to set.
   */
  public void setValence(long value) {
    this.valence = value;
  }

  /**
   * Gets the value of the 'tempo' field.
   * @return The value of the 'tempo' field.
   */
  public long getTempo() {
    return tempo;
  }


  /**
   * Sets the value of the 'tempo' field.
   * @param value the value to set.
   */
  public void setTempo(long value) {
    this.tempo = value;
  }

  /**
   * Gets the value of the 'time_signature' field.
   * @return The value of the 'time_signature' field.
   */
  public long getTimeSignature() {
    return time_signature;
  }


  /**
   * Sets the value of the 'time_signature' field.
   * @param value the value to set.
   */
  public void setTimeSignature(long value) {
    this.time_signature = value;
  }

  /**
   * Gets the value of the 'track_genre' field.
   * @return The value of the 'track_genre' field.
   */
  public java.lang.CharSequence getTrackGenre() {
    return track_genre;
  }


  /**
   * Sets the value of the 'track_genre' field.
   * @param value the value to set.
   */
  public void setTrackGenre(java.lang.CharSequence value) {
    this.track_genre = value;
  }

  /**
   * Creates a new SpotifyAvroModel RecordBuilder.
   * @return A new SpotifyAvroModel RecordBuilder
   */
  public static io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder newBuilder() {
    return new io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder();
  }

  /**
   * Creates a new SpotifyAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SpotifyAvroModel RecordBuilder
   */
  public static io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder newBuilder(io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder other) {
    if (other == null) {
      return new io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder();
    } else {
      return new io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new SpotifyAvroModel RecordBuilder by copying an existing SpotifyAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new SpotifyAvroModel RecordBuilder
   */
  public static io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder newBuilder(io.projects.spotify.kafka.avro.model.SpotifyAvroModel other) {
    if (other == null) {
      return new io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder();
    } else {
      return new io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for SpotifyAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SpotifyAvroModel>
    implements org.apache.avro.data.RecordBuilder<SpotifyAvroModel> {

    private long number;
    private long track_id;
    private java.lang.CharSequence artists;
    private java.lang.CharSequence album_name;
    private java.lang.CharSequence track_name;
    private long popularity;
    private long duration_ms;
    private boolean explicit;
    private long danceability;
    private long energy;
    private long key;
    private long mode;
    private long speechiness;
    private long acousticness;
    private long instrumentalness;
    private long liveness;
    private long valence;
    private long tempo;
    private long time_signature;
    private java.lang.CharSequence track_genre;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.track_id)) {
        this.track_id = data().deepCopy(fields()[1].schema(), other.track_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.artists)) {
        this.artists = data().deepCopy(fields()[2].schema(), other.artists);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.album_name)) {
        this.album_name = data().deepCopy(fields()[3].schema(), other.album_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.track_name)) {
        this.track_name = data().deepCopy(fields()[4].schema(), other.track_name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.popularity)) {
        this.popularity = data().deepCopy(fields()[5].schema(), other.popularity);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[6].schema(), other.duration_ms);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.explicit)) {
        this.explicit = data().deepCopy(fields()[7].schema(), other.explicit);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.danceability)) {
        this.danceability = data().deepCopy(fields()[8].schema(), other.danceability);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.energy)) {
        this.energy = data().deepCopy(fields()[9].schema(), other.energy);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.key)) {
        this.key = data().deepCopy(fields()[10].schema(), other.key);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.mode)) {
        this.mode = data().deepCopy(fields()[11].schema(), other.mode);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[12].schema(), other.speechiness);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[13].schema(), other.acousticness);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[14].schema(), other.instrumentalness);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.liveness)) {
        this.liveness = data().deepCopy(fields()[15].schema(), other.liveness);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.valence)) {
        this.valence = data().deepCopy(fields()[16].schema(), other.valence);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.tempo)) {
        this.tempo = data().deepCopy(fields()[17].schema(), other.tempo);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[18].schema(), other.time_signature);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.track_genre)) {
        this.track_genre = data().deepCopy(fields()[19].schema(), other.track_genre);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
    }

    /**
     * Creates a Builder by copying an existing SpotifyAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(io.projects.spotify.kafka.avro.model.SpotifyAvroModel other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.track_id)) {
        this.track_id = data().deepCopy(fields()[1].schema(), other.track_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.artists)) {
        this.artists = data().deepCopy(fields()[2].schema(), other.artists);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.album_name)) {
        this.album_name = data().deepCopy(fields()[3].schema(), other.album_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.track_name)) {
        this.track_name = data().deepCopy(fields()[4].schema(), other.track_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.popularity)) {
        this.popularity = data().deepCopy(fields()[5].schema(), other.popularity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[6].schema(), other.duration_ms);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.explicit)) {
        this.explicit = data().deepCopy(fields()[7].schema(), other.explicit);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.danceability)) {
        this.danceability = data().deepCopy(fields()[8].schema(), other.danceability);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.energy)) {
        this.energy = data().deepCopy(fields()[9].schema(), other.energy);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.key)) {
        this.key = data().deepCopy(fields()[10].schema(), other.key);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mode)) {
        this.mode = data().deepCopy(fields()[11].schema(), other.mode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[12].schema(), other.speechiness);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[13].schema(), other.acousticness);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[14].schema(), other.instrumentalness);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.liveness)) {
        this.liveness = data().deepCopy(fields()[15].schema(), other.liveness);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.valence)) {
        this.valence = data().deepCopy(fields()[16].schema(), other.valence);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.tempo)) {
        this.tempo = data().deepCopy(fields()[17].schema(), other.tempo);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[18].schema(), other.time_signature);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.track_genre)) {
        this.track_genre = data().deepCopy(fields()[19].schema(), other.track_genre);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'number' field.
      * @return The value.
      */
    public long getNumber() {
      return number;
    }


    /**
      * Sets the value of the 'number' field.
      * @param value The value of 'number'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setNumber(long value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'number' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_id' field.
      * @return The value.
      */
    public long getTrackId() {
      return track_id;
    }


    /**
      * Sets the value of the 'track_id' field.
      * @param value The value of 'track_id'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setTrackId(long value) {
      validate(fields()[1], value);
      this.track_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'track_id' field has been set.
      * @return True if the 'track_id' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'track_id' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearTrackId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'artists' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtists() {
      return artists;
    }


    /**
      * Sets the value of the 'artists' field.
      * @param value The value of 'artists'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setArtists(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.artists = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'artists' field has been set.
      * @return True if the 'artists' field has been set, false otherwise.
      */
    public boolean hasArtists() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'artists' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearArtists() {
      artists = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'album_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlbumName() {
      return album_name;
    }


    /**
      * Sets the value of the 'album_name' field.
      * @param value The value of 'album_name'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setAlbumName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.album_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'album_name' field has been set.
      * @return True if the 'album_name' field has been set, false otherwise.
      */
    public boolean hasAlbumName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'album_name' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearAlbumName() {
      album_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrackName() {
      return track_name;
    }


    /**
      * Sets the value of the 'track_name' field.
      * @param value The value of 'track_name'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setTrackName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.track_name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'track_name' field has been set.
      * @return True if the 'track_name' field has been set, false otherwise.
      */
    public boolean hasTrackName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'track_name' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearTrackName() {
      track_name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'popularity' field.
      * @return The value.
      */
    public long getPopularity() {
      return popularity;
    }


    /**
      * Sets the value of the 'popularity' field.
      * @param value The value of 'popularity'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setPopularity(long value) {
      validate(fields()[5], value);
      this.popularity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'popularity' field has been set.
      * @return True if the 'popularity' field has been set, false otherwise.
      */
    public boolean hasPopularity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'popularity' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearPopularity() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration_ms' field.
      * @return The value.
      */
    public long getDurationMs() {
      return duration_ms;
    }


    /**
      * Sets the value of the 'duration_ms' field.
      * @param value The value of 'duration_ms'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setDurationMs(long value) {
      validate(fields()[6], value);
      this.duration_ms = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'duration_ms' field has been set.
      * @return True if the 'duration_ms' field has been set, false otherwise.
      */
    public boolean hasDurationMs() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'duration_ms' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearDurationMs() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'explicit' field.
      * @return The value.
      */
    public boolean getExplicit() {
      return explicit;
    }


    /**
      * Sets the value of the 'explicit' field.
      * @param value The value of 'explicit'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setExplicit(boolean value) {
      validate(fields()[7], value);
      this.explicit = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'explicit' field has been set.
      * @return True if the 'explicit' field has been set, false otherwise.
      */
    public boolean hasExplicit() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'explicit' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearExplicit() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'danceability' field.
      * @return The value.
      */
    public long getDanceability() {
      return danceability;
    }


    /**
      * Sets the value of the 'danceability' field.
      * @param value The value of 'danceability'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setDanceability(long value) {
      validate(fields()[8], value);
      this.danceability = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'danceability' field has been set.
      * @return True if the 'danceability' field has been set, false otherwise.
      */
    public boolean hasDanceability() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'danceability' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearDanceability() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * @return The value.
      */
    public long getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setEnergy(long value) {
      validate(fields()[9], value);
      this.energy = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'energy' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearEnergy() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public long getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setKey(long value) {
      validate(fields()[10], value);
      this.key = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearKey() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode' field.
      * @return The value.
      */
    public long getMode() {
      return mode;
    }


    /**
      * Sets the value of the 'mode' field.
      * @param value The value of 'mode'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setMode(long value) {
      validate(fields()[11], value);
      this.mode = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'mode' field has been set.
      * @return True if the 'mode' field has been set, false otherwise.
      */
    public boolean hasMode() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'mode' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearMode() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'speechiness' field.
      * @return The value.
      */
    public long getSpeechiness() {
      return speechiness;
    }


    /**
      * Sets the value of the 'speechiness' field.
      * @param value The value of 'speechiness'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setSpeechiness(long value) {
      validate(fields()[12], value);
      this.speechiness = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'speechiness' field has been set.
      * @return True if the 'speechiness' field has been set, false otherwise.
      */
    public boolean hasSpeechiness() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'speechiness' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearSpeechiness() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'acousticness' field.
      * @return The value.
      */
    public long getAcousticness() {
      return acousticness;
    }


    /**
      * Sets the value of the 'acousticness' field.
      * @param value The value of 'acousticness'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setAcousticness(long value) {
      validate(fields()[13], value);
      this.acousticness = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'acousticness' field has been set.
      * @return True if the 'acousticness' field has been set, false otherwise.
      */
    public boolean hasAcousticness() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'acousticness' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearAcousticness() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentalness' field.
      * @return The value.
      */
    public long getInstrumentalness() {
      return instrumentalness;
    }


    /**
      * Sets the value of the 'instrumentalness' field.
      * @param value The value of 'instrumentalness'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setInstrumentalness(long value) {
      validate(fields()[14], value);
      this.instrumentalness = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentalness' field has been set.
      * @return True if the 'instrumentalness' field has been set, false otherwise.
      */
    public boolean hasInstrumentalness() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'instrumentalness' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearInstrumentalness() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveness' field.
      * @return The value.
      */
    public long getLiveness() {
      return liveness;
    }


    /**
      * Sets the value of the 'liveness' field.
      * @param value The value of 'liveness'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setLiveness(long value) {
      validate(fields()[15], value);
      this.liveness = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'liveness' field has been set.
      * @return True if the 'liveness' field has been set, false otherwise.
      */
    public boolean hasLiveness() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'liveness' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearLiveness() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'valence' field.
      * @return The value.
      */
    public long getValence() {
      return valence;
    }


    /**
      * Sets the value of the 'valence' field.
      * @param value The value of 'valence'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setValence(long value) {
      validate(fields()[16], value);
      this.valence = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'valence' field has been set.
      * @return True if the 'valence' field has been set, false otherwise.
      */
    public boolean hasValence() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'valence' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearValence() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempo' field.
      * @return The value.
      */
    public long getTempo() {
      return tempo;
    }


    /**
      * Sets the value of the 'tempo' field.
      * @param value The value of 'tempo'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setTempo(long value) {
      validate(fields()[17], value);
      this.tempo = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'tempo' field has been set.
      * @return True if the 'tempo' field has been set, false otherwise.
      */
    public boolean hasTempo() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'tempo' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearTempo() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_signature' field.
      * @return The value.
      */
    public long getTimeSignature() {
      return time_signature;
    }


    /**
      * Sets the value of the 'time_signature' field.
      * @param value The value of 'time_signature'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setTimeSignature(long value) {
      validate(fields()[18], value);
      this.time_signature = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'time_signature' field has been set.
      * @return True if the 'time_signature' field has been set, false otherwise.
      */
    public boolean hasTimeSignature() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'time_signature' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearTimeSignature() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_genre' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrackGenre() {
      return track_genre;
    }


    /**
      * Sets the value of the 'track_genre' field.
      * @param value The value of 'track_genre'.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder setTrackGenre(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.track_genre = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'track_genre' field has been set.
      * @return True if the 'track_genre' field has been set, false otherwise.
      */
    public boolean hasTrackGenre() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'track_genre' field.
      * @return This builder.
      */
    public io.projects.spotify.kafka.avro.model.SpotifyAvroModel.Builder clearTrackGenre() {
      track_genre = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SpotifyAvroModel build() {
      try {
        SpotifyAvroModel record = new SpotifyAvroModel();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.Long) defaultValue(fields()[0]);
        record.track_id = fieldSetFlags()[1] ? this.track_id : (java.lang.Long) defaultValue(fields()[1]);
        record.artists = fieldSetFlags()[2] ? this.artists : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.album_name = fieldSetFlags()[3] ? this.album_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.track_name = fieldSetFlags()[4] ? this.track_name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.popularity = fieldSetFlags()[5] ? this.popularity : (java.lang.Long) defaultValue(fields()[5]);
        record.duration_ms = fieldSetFlags()[6] ? this.duration_ms : (java.lang.Long) defaultValue(fields()[6]);
        record.explicit = fieldSetFlags()[7] ? this.explicit : (java.lang.Boolean) defaultValue(fields()[7]);
        record.danceability = fieldSetFlags()[8] ? this.danceability : (java.lang.Long) defaultValue(fields()[8]);
        record.energy = fieldSetFlags()[9] ? this.energy : (java.lang.Long) defaultValue(fields()[9]);
        record.key = fieldSetFlags()[10] ? this.key : (java.lang.Long) defaultValue(fields()[10]);
        record.mode = fieldSetFlags()[11] ? this.mode : (java.lang.Long) defaultValue(fields()[11]);
        record.speechiness = fieldSetFlags()[12] ? this.speechiness : (java.lang.Long) defaultValue(fields()[12]);
        record.acousticness = fieldSetFlags()[13] ? this.acousticness : (java.lang.Long) defaultValue(fields()[13]);
        record.instrumentalness = fieldSetFlags()[14] ? this.instrumentalness : (java.lang.Long) defaultValue(fields()[14]);
        record.liveness = fieldSetFlags()[15] ? this.liveness : (java.lang.Long) defaultValue(fields()[15]);
        record.valence = fieldSetFlags()[16] ? this.valence : (java.lang.Long) defaultValue(fields()[16]);
        record.tempo = fieldSetFlags()[17] ? this.tempo : (java.lang.Long) defaultValue(fields()[17]);
        record.time_signature = fieldSetFlags()[18] ? this.time_signature : (java.lang.Long) defaultValue(fields()[18]);
        record.track_genre = fieldSetFlags()[19] ? this.track_genre : (java.lang.CharSequence) defaultValue(fields()[19]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SpotifyAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<SpotifyAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SpotifyAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<SpotifyAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.number);

    out.writeLong(this.track_id);

    out.writeString(this.artists);

    out.writeString(this.album_name);

    out.writeString(this.track_name);

    out.writeLong(this.popularity);

    out.writeLong(this.duration_ms);

    out.writeBoolean(this.explicit);

    out.writeLong(this.danceability);

    out.writeLong(this.energy);

    out.writeLong(this.key);

    out.writeLong(this.mode);

    out.writeLong(this.speechiness);

    out.writeLong(this.acousticness);

    out.writeLong(this.instrumentalness);

    out.writeLong(this.liveness);

    out.writeLong(this.valence);

    out.writeLong(this.tempo);

    out.writeLong(this.time_signature);

    out.writeString(this.track_genre);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.number = in.readLong();

      this.track_id = in.readLong();

      this.artists = in.readString(this.artists instanceof Utf8 ? (Utf8)this.artists : null);

      this.album_name = in.readString(this.album_name instanceof Utf8 ? (Utf8)this.album_name : null);

      this.track_name = in.readString(this.track_name instanceof Utf8 ? (Utf8)this.track_name : null);

      this.popularity = in.readLong();

      this.duration_ms = in.readLong();

      this.explicit = in.readBoolean();

      this.danceability = in.readLong();

      this.energy = in.readLong();

      this.key = in.readLong();

      this.mode = in.readLong();

      this.speechiness = in.readLong();

      this.acousticness = in.readLong();

      this.instrumentalness = in.readLong();

      this.liveness = in.readLong();

      this.valence = in.readLong();

      this.tempo = in.readLong();

      this.time_signature = in.readLong();

      this.track_genre = in.readString(this.track_genre instanceof Utf8 ? (Utf8)this.track_genre : null);

    } else {
      for (int i = 0; i < 20; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.number = in.readLong();
          break;

        case 1:
          this.track_id = in.readLong();
          break;

        case 2:
          this.artists = in.readString(this.artists instanceof Utf8 ? (Utf8)this.artists : null);
          break;

        case 3:
          this.album_name = in.readString(this.album_name instanceof Utf8 ? (Utf8)this.album_name : null);
          break;

        case 4:
          this.track_name = in.readString(this.track_name instanceof Utf8 ? (Utf8)this.track_name : null);
          break;

        case 5:
          this.popularity = in.readLong();
          break;

        case 6:
          this.duration_ms = in.readLong();
          break;

        case 7:
          this.explicit = in.readBoolean();
          break;

        case 8:
          this.danceability = in.readLong();
          break;

        case 9:
          this.energy = in.readLong();
          break;

        case 10:
          this.key = in.readLong();
          break;

        case 11:
          this.mode = in.readLong();
          break;

        case 12:
          this.speechiness = in.readLong();
          break;

        case 13:
          this.acousticness = in.readLong();
          break;

        case 14:
          this.instrumentalness = in.readLong();
          break;

        case 15:
          this.liveness = in.readLong();
          break;

        case 16:
          this.valence = in.readLong();
          break;

        case 17:
          this.tempo = in.readLong();
          break;

        case 18:
          this.time_signature = in.readLong();
          break;

        case 19:
          this.track_genre = in.readString(this.track_genre instanceof Utf8 ? (Utf8)this.track_genre : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










